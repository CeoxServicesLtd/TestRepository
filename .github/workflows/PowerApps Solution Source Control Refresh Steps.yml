name: PowerApps Solution Source Control Refresh Steps

on:
  workflow_call:
    inputs:
      solutionName:
        required: true
        type: string
      checkParameterFile:
        required: true
        type: boolean
      serviceConnectionUrl:
        required: true
        type: string
      applicationId:
        required: true
        type: string      
        
jobs:
  PowerApps-Solution-Source-Control-Refresh-Steps:
    runs-on: windows-latest
    steps:

    - uses: actions/checkout@v2
      with:
        lfs: true

    - name: powerplatform-actions             
      uses: microsoft/powerplatform-actions/actions-install@v1

    - name: Update solution version            
      uses: microsoft/powerplatform-actions/set-online-solution-version@v1
      with:
         environment-url: ${{ inputs.serviceConnectionUrl }}
         app-id: ${{ inputs.applicationId }} 
         client-secret: ${{ secrets.DEVAPPLICATIONSECRET }}
         tenant-id: ${{ secrets.TENANTID }}
         version: 1.0.0.0
         name: ${{ inputs.solutionName }}

    - name: Export unmanaged version of solution 
      uses: microsoft/powerplatform-actions/export-solution@v1
      with:
         environment-url: ${{ inputs.serviceConnectionUrl }}
         app-id: ${{ inputs.applicationId }} 
         client-secret: ${{ secrets.DEVAPPLICATIONSECRET }}
         tenant-id: ${{ secrets.TENANTID }}
         solution-name: ${{ inputs.solutionName }}
         solution-output-file: ${{ runner.temp }}\${{ inputs.solutionName }}.zip

    - name: Export unmanaged version of solution 
      uses: microsoft/powerplatform-actions/export-solution@v1
      with:
         environment-url: ${{ inputs.serviceConnectionUrl }}
         app-id: ${{ inputs.applicationId }} 
         client-secret: ${{ secrets.DEVAPPLICATIONSECRET }}
         tenant-id: ${{ secrets.TENANTID }}
         solution-name: ${{ inputs.solutionName }}
         solution-output-file: ${{ runner.temp }}\${{ inputs.solutionName }}_Managed.zip      
         managed: true

 # - ${{ if eq(parameters.checkParameterFile, true) }}:
 #   - task: CmdLine@2
 #     displayName: "Generate Comparison Parameter File"
 #     inputs:
 #       script: '$(PACEXEPATH) solution create-settings --solution-zip "$(Build.ArtifactStagingDirectory)\${{ parameters.solutionName }}.zip" --settings-file "$(Build.ArtifactStagingDirectory)\${{ parameters.solutionName }}.json"'

  # - ${{ if eq(parameters.checkParameterFile, true) }}:
#    - task: PowerShell@2
 #     displayName: "Compare Parameter Files"
 #     inputs:
 #       targetType: 'inline'
 #       script: |
 #         $sourceFile = Get-Content -Path "$(Build.ArtifactStagingDirectory)\${{ parameters.solutionName }}.json"
 #         $targetFile = Get-Content -Path "$(Build.SourcesDirectory)\Deployment\Solution Parameter Files\Reference Files\${{ parameters.solutionName }}.json"
          
  #        if(Compare-Object $sourceFile $targetFile)
  #        {
  #          throw "Parameter files are different; confirm parameter files are up-to-date"
  #        }


    - name: Unpack solution 
      uses: microsoft/powerplatform-actions/unpack-solution@v1
      with:
         solution-type: both
         solution-file: ${{ runner.temp }}\${{ inputs.solutionName }}.zip
         solution-folder:  ${{ github.workspace }}\Solutions\${{ inputs.solutionName }}

    - name: Git Fetch and Commit 
      run: |
        git fetch --all  
        git config --global user.email "no-reply@github.com"
        git config --global user.name "GitHub Actions"
        git checkout main
        git add --all 
        git commit -m "Updates from the dev environment"
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
        git push

