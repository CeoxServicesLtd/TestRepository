name: Power Apps Deployment Steps.yml

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      serviceConnectionUrl:
        required: true
        type: string
      appId:
        required: true
        type: string                 
      deployAutomatedDeploymentExample:
        description: 'Deploy Automated Example?'
        type: boolean
        default: false
      deployAutomatedDeploymentExampleMethod:
          description: 'Deploy Automated Deployment Example UAT Method'
          type: string      
      deployConfigurationData:
        description: 'Deploy Configuration Data?'
        type: boolean
        default: false            
      updateOrganizationSettings:
        description: 'Update Organization Settings?'
        type: boolean
        default: false     
    secrets:
      clientSecret:
        required: true   
      tenantId:
        required: true

jobs:
 Deploy:
    runs-on: windows-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v4

      - name: powerplatform-actions             
        uses: microsoft/powerplatform-actions/actions-install@v1

      - name: Import Solution
        uses: microsoft/powerplatform-actions/import-solution@v1
        if: inputs.deployAutomatedDeploymentExample == true
        with:
           environment-url: ${{ inputs.serviceConnectionUrl }}
           app-id: ${{ inputs.appId }}
           client-secret: ${{ secrets.clientSecret }}
           tenant-id: ${{ secrets.tenantId }}
           stage-and-upgrade: ${{ inputs.deployAutomatedDeploymentExampleMethod }} == "Upgrade"
           solution-file: .\Solutions\AutomatedDeploymentExample_Managed.zip
           use-deployment-settings-file: true
           deployment-settings-file: .\SolutionParameterFiles\AutomatedDeploymentExample.${{inputs.environment}}.json

      - name: Import Data
        uses: microsoft/powerplatform-actions/import-data@v1
        if: inputs.deployConfigurationData == true
        with:
         environment-url: ${{ inputs.serviceConnectionUrl }}
         app-id: ${{ inputs.appId }}
         client-secret: ${{ secrets.clientSecret }}
         tenant-id: ${{ secrets.tenantId }}
         data-file: .\Data\Automated Deployment Example Data.zip

      - name: Add pac to PATH
        shell: pwsh
        if: inputs.updateOrganisationSettings == true 
        run: |
          $pac = (Get-Item "$env:POWERPLATFORMTOOLS_PACPATH").Directory.FullName;
          "$pac" | Out-File -FilePath $env:GITHUB_PATH -Append   

      - name: PAC AUTH
        shell: pwsh
        if: inputs.updateOrganisationSettings == true 
        run: |
              pac auth create --url ${{ inputs.serviceConnectionUrl }} --applicationId ${{ inputs.appId }} --clientSecret ${{ secrets.clientSecret }}  --tenant ${{ secrets.tenantId }}

      - name: Update Organisation Settings
        shell: pwsh
        if: inputs.updateOrganisationSettings == true        
        run: |
            $data = Get-content ".\OrganisationSettingsFiles\OrganisationSettings.${{ inputs.environment }}.json" | out-string | ConvertFrom-Json
                    
            foreach ($item in $data){
            
                $pacCommand = "pac org update-settings --name " + $item.name + " --value "
            
                switch($item.type)
                {
                    "string"
                    { 
                        $pacCommand = $pacCommand + "`"" + $item.value + "`""
                        break
                    }
                    "bool"
                    { 
                        $pacCommand = $pacCommand + $item.value.ToString().ToLower()
                        break
                    }
                    default 
                    { 
                        $pacCommand = $pacCommand + $item.value 
                    }
                }
            
                Write-Host "command - " $pacCommand
            
                Invoke-Expression -Command "$pacCommand"

            }
            
      - name: Set PowerShell Paths
        id: setPowerShellPaths
        shell: pwsh
        run: |
          $toolsPath = Get-Location
          $powerPlatformToolsSubPath = "_coe\ALM_ACC"
          $powerPlatformToolsPath = "$toolsPath\$powerPlatformToolsSubPath"
          echo "powerPlatformToolsSubPath=$powerPlatformToolsSubPath" >> $env:GITHUB_OUTPUT
          echo "powerPlatformToolsPath=$powerPlatformToolsPath" >> $env:GITHUB_OUTPUT
  
      - name: Install PowerShell Modules
        id: installPowerShellModules
        shell: pwsh
        run: |
          $xrmDataPowerShellVersion = "2.8.14"
          $powerAppsAdminModuleVersion = "2.0.148"
        
          # Installs modules into specified path. 
          function Install-PowerShellModule {
            [CmdletBinding()]
            param(
                [string][ValidateNotNullOrEmpty()]$RootPath,
                [string][ValidateNotNullOrEmpty()]$ModuleName,
                [string][ValidateNotNullOrEmpty()]$ModuleVersion,
                [string][ValidateNotNullOrEmpty()]$SubPath
            )
      
            Write-Host "Installing PS module $ModuleName - $ModuleVersion ..."
            $savedModulePath = [IO.Path]::Combine($RootPath, $ModuleName, $ModuleVersion)
            # MAX_PATH limitation could be lifted by prefixing with: '\\?\', but is not compatible with PowerShell
            # see: https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file#paths
            # using minified path parts where possible
            $fixedModulePath = [IO.Path]::Combine($RootPath, $SubPath, $ModuleVersion, $ModuleName)
      
            if (!(Test-Path -Path $fixedModulePath)) {
                Save-Module -Name $ModuleName -Path $RootPath -RequiredVersion $ModuleVersion -Force
      
                Write-Verbose "Moving module into $fixedModulePath ..."
                $moduleItems = Get-ChildItem -Path $savedModulePath
                New-Item $fixedModulePath -ItemType Directory -Force | Out-Null
                $moduleItems | Move-Item -Destination $fixedModulePath -Force
                Remove-Item -Path ([IO.Path]::GetDirectoryName($($savedModulePath))) -Recurse -Force | Out-Null
            } else {
                Write-Verbose "Found module already installed, nothing to do."
            }
    
            # Set pipeline variable to be used in subsequent tasks when importing module
            $modulePath = Join-Path ([IO.Path]::GetDirectoryName($($fixedModulePath))) $ModuleName
            echo "CoETools_$($ModuleName.Replace('.','_'))=$modulePath" >> $env:GITHUB_OUTPUT
          }
    
          New-Item ${{ steps.setPowerShellPaths.outputs.powerPlatformToolsPath }} -ItemType Directory -Force | Out-Null
      
          Install-Module -ModuleName "Microsoft.Xrm.Data.PowerShell" -ModuleVersion $xrmDataPowerShellVersion -Force 
          Install-Module -ModuleName "Microsoft.PowerApps.Administration.PowerShell" -ModuleVersion $powerAppsAdminModuleVersion -Force
          
          echo "PowerAppsAdminModuleVersion=$powerAppsAdminModuleVersion" >> $env:GITHUB_OUTPUT
          echo "XrmDataPowerShellVersion=$xrmDataPowerShellVersion" >> $env:GITHUB_OUTPUT

      - name: Activate Flows
        shell: pwsh 
        run: |
          # load PowerShell files into memory
          . ".\PipelineUtils\activate-flows.ps1"
          try {
              Invoke-ActivateFlows '----DataverseConnectionString------' '${{ inputs.serviceConnectionUrl }}' 'Microsoft.Xrm.Data.PowerShell' '${{ steps.installPowerShellModules.outputs.XrmDataPowerShellVersion }}' 'Microsoft.PowerApps.Administration.PowerShell' '${{ steps.installPowerShellModules.outputs.PowerAppsAdminModuleVersion }}' '${{ secrets.tenantId }}' '${{ inputs.appId }}' '${{ secrets.clientSecret }}' 'AutomatedDeploymentExample' '---EnvironmentId---' '' '' '.\FlowActivation\Flow Activation Order.json' "$env:MAPPED_SPN_Token"
          } catch {
              Write-Host "Errors occurred while activating flows. Please review the log for specific errors and verify your deployment configuration settings."
              Write-Host $_
              exit 1;
          }

  #          - template: CoE Accelerator/set-service-connection-url.yml
  #            parameters:
  #              serviceConnectionName: '${{ parameters.powerPlatformServiceConnectionName }}'
  #              serviceConnectionUrl: '${{ parameters.serviceConnectionUrl }}'

  #          - task: PowerPlatformSetConnectionVariables@2
  #            name: connectionVariables
  #            displayName: "Get Connection Details for PP Connection"
  #            inputs:
  #              authenticationType: 'PowerPlatformSPN'
  #              PowerPlatformSPN: '${{ parameters.powerPlatformServiceConnectionName }}'

 #           - template: CoE Accelerator/set-tools-paths.yml

 #           - template: CoE Accelerator/set-spn-token.yml
 #             parameters:
 #               serviceConnection: "${{ parameters.serviceConnectionUrl }}"
 #               tenantId: $(connectionVariables.BuildTools.TenantId)
#                clientId: $(connectionVariables.BuildTools.ApplicationId)
#                clientSecret: $(connectionVariables.BuildTools.ClientSecret)
                
#            - template: CoE Accelerator/install-powershell-modules.yml

#            - task: PowerShell@2
#              displayName: 'Set Pac.Exe path' 
#              inputs:
#                targetType: 'inline'
#                script: |
#                  $pacExePath = $env:POWERPLATFORMTOOLS_PACCLIPATH + "\pac\tools\pac.exe"  
#                  echo "##vso[task.setvariable variable=PACEXEPATH]$pacExePath"

#            - task: PowerShell@2
#              displayName: 'PAC Auth'
#              inputs:
#                targetType: 'inline'
#                script: |
#                  $pacCommand = "auth create --url ${{ parameters.serviceConnectionUrl }} --applicationId $(connectionVariables.BuildTools.ApplicationId) --clientSecret $(connectionVariables.BuildTools.ClientSecret) --tenant $(connectionVariables.BuildTools.TenantId)"
#                  Write-Host "Pac command - $(PACEXEPATH) $pacCommand"
#                  Invoke-Expression -Command "$(PACEXEPATH) $pacCommand"                

 #             - template: CoE Accelerator/activate-flows.yml
 #               parameters:
 #                 solutionName: 'AutomatedDeploymentExample2'
 #                 serviceConnection: '${{ parameters.serviceConnectionUrl }}'
 #                 solutionComponentOwnershipConfiguration: ''
 #                 connectionReferences: ''
 #                 activateFlowConfiguration: '$(Pipeline.Workspace)\Flow Activation\Flow Activation Order.json'
