name: Power Apps Deployment Steps.yml

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      serviceConnectionUrl:
        required: true
        type: string
      appId:
        required: true
        type: string                 
      deployAutomatedDeploymentExample:
        description: 'Deploy Automated Example?'
        type: boolean
        default: false
      deployAutomatedDeploymentExampleMethod:
          description: 'Deploy Automated Deployment Example UAT Method'
          type: string      
      deployConfigurationData:
        description: 'Deploy Configuration Data?'
        type: boolean
        default: false            
      updateOrganizationSettings:
        description: 'Update Organization Settings?'
        type: boolean
        default: false     
    secrets:
      clientSecret:
        required: true   
      tenantId:
        required: true

jobs:
 Deploy:
    runs-on: windows-latest
    steps:
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v4

      - name: powerplatform-actions             
        uses: microsoft/powerplatform-actions/actions-install@v1

      - name: Import Solution
        uses: microsoft/powerplatform-actions/import-solution@v1
        if: inputs.deployAutomatedDeploymentExample == true
        with:
           environment-url: ${{ inputs.serviceConnectionUrl }}
           app-id: ${{ inputs.appId }}
           client-secret: ${{ secrets.clientSecret }}
           tenant-id: ${{ secrets.tenantId }}
           stage-and-upgrade: ${{ inputs.deployAutomatedDeploymentExampleMethod }} == "Upgrade"
           solution-file: .\Solutions\AutomatedDeploymentExample_Managed.zip
           deployment-settings-file: .\SolutionParameterFiles\AutomatedDeploymentExample.${{inputs.environment}}.json


 #           - ${{ if ne(parameters.deployAutomatedDeploymentExample, 'No') }}:
 #             - template: Power Apps Deploy Solution.yml
 #               parameters:
 #                 powerPlatformServiceConnectionName: '${{ parameters.powerPlatformServiceConnectionName }}'
 #                 solutionName: 'AutomatedDeploymentExample'
 #                 solutionParameterFileName: 'AutomatedDeploymentExample.${{ parameters.environment }}.json'
 #                 useSolutionParameterFile: true
 #                 deploymentTypeVariableName: '${{ parameters.deployAutomatedDeploymentExampleMethodVariableName }}'


 #           - ${{ if eq(parameters.deployConfigurationData, true) }}:
 #             - task: PowerPlatformImportData@2
 #               inputs:
 #                 authenticationType: 'PowerPlatformSPN'
 #                 PowerPlatformSPN: '${{ parameters.powerPlatformServiceConnectionName }}'
 #                 DataFile: '$(Pipeline.Workspace)/Deployment Data/Automated Deployment Example Data.zip'

      
 #           - ${{ if ne(parameters.updateOrganizationSettings, 'No') }}:
#              - task: PowerShell@2
#                displayName: 'PAC Set Settings'
#                inputs:
#                  targetType: 'inline'
#                  script: |
#                    $data = Get-content "$(Pipeline.Workspace)\OrganisationSettingsFiles\OrganisationSettings.${{ parameters.environment }}.json" | out-string | ConvertFrom-Json
#                    
#                    foreach ($item in $data){
#                    
#                        $pacCommand = "org update-settings --name " + $item.name + ' --value '
#                    
#                        switch($item.type)
#                        {
#                            "string"
#                            { 
#                                $pacCommand = $pacCommand + "`"" + $item.value + "`""
#                                break
#                            }
#                            "bool"
#                            { 
#                                $pacCommand = $pacCommand + $item.value.ToString().ToLower()
#                                break
#                            }
#                            default 
#                            { 
#                                $pacCommand = $pacCommand + $item.value 
#                            }
#                        }
#                    
        #                Write-Host "command - $(PACEXEPATH) " $pacCommand
                    
        #                Invoke-Expression -Command "$(PACEXEPATH) $pacCommand"
   #                 }




  #          - template: CoE Accelerator/set-service-connection-url.yml
  #            parameters:
  #              serviceConnectionName: '${{ parameters.powerPlatformServiceConnectionName }}'
  #              serviceConnectionUrl: '${{ parameters.serviceConnectionUrl }}'

  #          - task: PowerPlatformSetConnectionVariables@2
  #            name: connectionVariables
  #            displayName: "Get Connection Details for PP Connection"
  #            inputs:
  #              authenticationType: 'PowerPlatformSPN'
  #              PowerPlatformSPN: '${{ parameters.powerPlatformServiceConnectionName }}'

 #           - template: CoE Accelerator/set-tools-paths.yml

 #           - template: CoE Accelerator/set-spn-token.yml
 #             parameters:
 #               serviceConnection: "${{ parameters.serviceConnectionUrl }}"
 #               tenantId: $(connectionVariables.BuildTools.TenantId)
#                clientId: $(connectionVariables.BuildTools.ApplicationId)
#                clientSecret: $(connectionVariables.BuildTools.ClientSecret)
                
#            - template: CoE Accelerator/install-powershell-modules.yml

#            - task: PowerShell@2
#              displayName: 'Set Pac.Exe path' 
#              inputs:
#                targetType: 'inline'
#                script: |
#                  $pacExePath = $env:POWERPLATFORMTOOLS_PACCLIPATH + "\pac\tools\pac.exe"  
#                  echo "##vso[task.setvariable variable=PACEXEPATH]$pacExePath"

#            - task: PowerShell@2
#              displayName: 'PAC Auth'
#              inputs:
#                targetType: 'inline'
#                script: |
#                  $pacCommand = "auth create --url ${{ parameters.serviceConnectionUrl }} --applicationId $(connectionVariables.BuildTools.ApplicationId) --clientSecret $(connectionVariables.BuildTools.ClientSecret) --tenant $(connectionVariables.BuildTools.TenantId)"
#                  Write-Host "Pac command - $(PACEXEPATH) $pacCommand"
#                  Invoke-Expression -Command "$(PACEXEPATH) $pacCommand"                




 #             - template: CoE Accelerator/activate-flows.yml
 #               parameters:
 #                 solutionName: 'AutomatedDeploymentExample2'
 #                 serviceConnection: '${{ parameters.serviceConnectionUrl }}'
 #                 solutionComponentOwnershipConfiguration: ''
 #                 connectionReferences: ''
 #                 activateFlowConfiguration: '$(Pipeline.Workspace)\Flow Activation\Flow Activation Order.json'
