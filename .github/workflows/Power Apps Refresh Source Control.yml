name: Power Apps Refresh Source Control

on:
  workflow_dispatch:
    inputs:
      sourceConnectionName:
        description: 'Source Environment'
        default: 'Power Platform Dev'
        type: choice
        options:
          - Power Platform Dev
      refreshConfigurationData:
        description: 'Refresh Configuration Data?'
        type: boolean
        default: false
      exportAutomatedDeploymentExample:
        description: 'Refresh Automated Deployment Example Into Source Control?'
        type: boolean
        default: false

jobs:

  export_vars:
    name: Export Variables to Output
    runs-on: ubuntu-latest
    outputs:
      serviceConnectionUrl: "${{ (inputs.sourceConnectionName == 'Power Platform Dev') && 'https://pembasedev.crm11.dynamics.com' || '' }}"
      applicationId: "3492d4d1-7c22-4928-891b-2d8a449546cb"
    steps:
      - run: echo "Exporting variables to outputs."

  Refresh-Source-Control-Steps:
    if: inputs.exportAutomatedDeploymentExample == true
    uses: ./.github/workflows/PowerApps Solution Source Control Refresh Steps.yml
    needs: export_vars
    with:
      solutionName: AutomatedDeploymentExample
      checkParameterFile: false
      serviceConnectionUrl: ${{ needs.export_vars.outputs.serviceConnectionUrl }}
      applicationId:  ${{ needs.export_vars.outputs.applicationId }}
    secrets: inherit

  Refresh-Source-Control:
    runs-on: windows-latest
    needs: Refresh-Source-Control-Steps
    if: always() && (needs.Refresh-Source-Control-Steps.result == 'skipped' || needs.Refresh-Source-Control-Steps.result == 'success') && inputs.refreshConfigurationData == true
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
          
      - name: powerplatform-actions             
        uses: microsoft/powerplatform-actions/actions-install@v1

      - name: Add pac to PATH
        shell: pwsh
        run: |
          $pac = (Get-Item "$env:POWERPLATFORMTOOLS_PACPATH").Directory.FullName;
          "$pac" | Out-File -FilePath $env:GITHUB_PATH -Append

  
      - name: Export Configuration Data
        uses: microsoft/powerplatform-actions/export-data@v1
        if: inputs.refreshConfigurationData == true
        with:
           environment-url: ${{ inputs.serviceConnectionUrl }}
           app-id: ${{ inputs.applicationId }} 
           client-secret: ${{ secrets.DEVAPPLICATIONSECRET }}
           tenant-id: ${{ secrets.TENANTID }}
           schema-file: '.\Deployment\Data\Automated Deployment Example Schema File.xml'
           data-file: '.\Deployment\Data\Automated Deployment Example Data.zip'
           overwrite: true

      - name: Git Fetch and Commit 
        run: |
          git fetch --all  
          git config --global user.email "no-reply@github.com"
          git config --global user.name "GitHub Actions"
          git checkout main
          git add --all 
          git commit -m "Updates from the dev environment"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git push

 #     - name: Auth
#        shell: pwsh
#        run: |
   #       Invoke-Expression -Command "pac auth create --url ${{ needs.export_vars.outputs.serviceConnectionUrl }} --applicationId ${{ needs.export_vars.outputs.applicationId }} --clientSecret ${{ secrets.DEVAPPLICATIONSECRET }} --tenant ${{ secrets.TENANTID }}"


  # - ${{ if eq(parameters.refreshConfigurationData, true) }}:
#    - task: PowerPlatformExportData@2
 #     displayName: 'Export Configuration Data' 
  #    inputs:
   #     authenticationType: 'PowerPlatformSPN'
    #    PowerPlatformSPN: ${{ parameters.sourceConnectionName }}
     #   SchemaFile: '$(Build.SourcesDirectory)\Deployment\Data\Automated Deployment Example Schema File.xml'
      #  DataFile: '$(Build.SourcesDirectory)\Deployment\Data\Automated Deployment Example Data.zip'
       # Overwrite: true
           
  #- task: CmdLine@2
  #  displayName: "Commit changes to source control"
  #  inputs:
  #    script: |
  #      echo commit all changes
  #      git config user.email "$(Build.QueuedById)"
  #      git config user.name "$(Build.QueuedBy)"
  #      git checkout -b "$(Build.SourceBranchName)"
  #      git add --all
  #      git commit -m "solution init"
  #      echo push code to new repo
  #      git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push origin $(Build.SourceBranchName)
